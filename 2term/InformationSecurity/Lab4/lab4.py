# -*- coding: utf-8 -*-
"""Lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13CKETN9wfxIZ32XmZHTaDNww10-MYpsj
"""

import matplotlib.pyplot as plt
import collections


def read_file(file_path):
  with open(file_path, 'r') as f:
    data = f.read()
  return data


def caesar_encrypt(text, shift):
    result = ""
    for char in text:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            shifted_char = chr((ord(char) - base + shift) % 26 + base)
            result += shifted_char
        else:
            result += char5
    return result


def caesar_decrypt(text, reverse_shift):
    return caesar_encrypt(text, reverse_shift)


def get_probabilities(text):
  symbol_counts = collections.Counter(text)
  total_symbols = len(text)
  probabilities = {symbol: count / total_symbols for symbol, count in symbol_counts.items()}
  return probabilities


def draw_hist(probabilities):
    plt.bar(probabilities.keys(), probabilities.values())
    plt.xlabel("Символ")
    plt.ylabel("Вероятность")
    plt.title("Вероятности символов")
    plt.show()

text = read_file('./data.txt')
k = 7

encrypted_text = caesar_encrypt(text, 7)
print(encrypted_text, '\n')

decrypted_text = caesar_decrypt(encrypted_text, -7)
print(decrypted_text, '\n')

probabilities = get_probabilities(text)
draw_hist(probabilities)

probabilities = get_probabilities(encrypted_text)
draw_hist(probabilities)

def trisemus_table(alphabet):
    N = len(alphabet)
    table = [alphabet[i:] + alphabet[:i] for i in range(N)]
    return table

def encrypt_trisemus(text, table):
    N = len(table)
    encrypted_text = ''
    for i, char in enumerate(text):
        if char in table[0]:
            row = i % N
            encrypted_text += table[row][table[0].index(char)]
        else:
            encrypted_text += char
    return encrypted_text

def decrypt_trisemus(encrypted_text, table):
    N = len(table)
    decrypted_text = ''
    for i, char in enumerate(encrypted_text):
        if char in table[0]:
            row = i % N
            decrypted_text += table[0][table[row].index(char)]
        else:
            decrypted_text += char
    return decrypted_text

alphabet = 'aäbcdefghijklmnoöpqrsßtuüvwxyzAÄBCDEFGHIJKLMNOÖPQRSẞTUÜVWXYZ'
table = trisemus_table(alphabet)

encrypted_text = encrypt_trisemus(text, table)
decrypted_text = decrypt_trisemus(encrypted_text, table)

print('Таблица Трисемуса:')
for row in table:
    print(' '.join(row))
print()

print(f'Открытый текст: {text}\n')
print(f'Зашифрованный текст: {encrypted_text}\n')
print(f'Расшифрованный текст: {decrypted_text}\n')