# p – простое число от 512 до 1024 битов; q –160-битное простое число, делитель (p – 1); 
# любое число g (g ≠ 1) такое, что g^q ≡ 1 mod p.
# Числа p, g, q являются открытыми и могут применяться группой пользователей.
# Выбирается число х < q (х является тайным ключом) и вычисляется последний элемент открытого ключа y ≡ g^(–х) mod p.
# Секретный ключ имеет длину не менее 160 битов.
# Для подписи сообщения выбирается случайное число k
# (1 < k < q) и вычисляет параметр а: a = g^k mod p. 
# Далее вычисляется хеш от канкатенации сообщения и числа
# а: h = H(Mo||a). Обратим внимание, что хэш-функция непосредственно не применяется к сообщению. Создается хеш-образ подписываемого сообщения, спереди присоединенного к числу а. Далее вычисляется значение b: b = (k + xh) mod q. 
# Получателю отправляются М' = Мо||S; S = {h, b}. 
# Для проверки подписи получатель вычисляет
# Х = g^b y^h (mod p)
# Затем он проверяет выполнение равенства: h = Н(Mп||Х). Подпись достоверна, если равенство выполняется.
import random
import hashlib

def generate_keys(p, q, g):
    x = random.randint(1, q - 1)  # Секретный ключ
    y = pow(g, -x, p)  # Открытый ключ
    return x, y

def sign_message(message, p, g, q, x):
    k = random.randint(1, q - 1)
    a = pow(g, k, p)
    h = int(hashlib.sha256(message.encode()).hexdigest(), 16)
    b = (k + x * h) % q
    return a, b

def verify_signature(message, signature, p, g, q, y):
    a, b = signature
    h = int(hashlib.sha256(message.encode()).hexdigest(), 16)
    X = (pow(g, b, p) * pow(y, h, p)) % p
    return h == int(hashlib.sha256(message.encode()).hexdigest(), 16)

p = 30742678177050758012328021006684056407581748096353607315785686396268369844541046244025858051614268242640829910101566187864010837215586149308591486212906265025210861645801495924570466199893458505652964129877057402931556824569860418510630361272277258006813328762616228637935038757673489475989263124170036446902135012380091816705643109858212224625017571773861209415918815842504081881208437428042347805491205784569725463830578602703523615634885763893334125012037835628400181391440275233097944469221605906257918966567042606685993109980802300702642510344714857536947400772589505726815579341318529351253125292119875916918191
q = 423173346644379168618504485520574982089019682524
g = 1069841001377870851325076399414122282681104102375498133122359642376811586257803742019941805637168222909713627151758582815442501897682731861379032060410647231706446340011764580846943022642712104230896329359423795276196866768456921478582263039400215704374549719810881219496723572514667558428621707441953210467276721746575641254875577277231272204156351647568654912351297151974581139012669066258222315312380023458846763780592565433948267426465541656921274568836700140592877783505476503604876413680415203741392520817340744169831886604958943374012369325814630867321120293734748691453032793324984241378688409674730663633

x, y = generate_keys(p, q, g)

message = "Hello, world!"
signature = sign_message(message, p, g, q, x)

verification_result = verify_signature(message, signature, p, g, q, y)
print("Подпись верна:", verification_result)
