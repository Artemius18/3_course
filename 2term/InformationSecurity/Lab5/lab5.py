# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gTUiiGZZIZVWzS9hIhPEOqi_whmDAIaQ
"""

def open_file(file_name):
  with open(file_name, 'r') as f:
     return f.read()

@timer_decorator
def spiral_matrix(message):
    n = int(len(message)**0.5)

    while len(message) < n * n:
        message.append(' ')

    matrix = [['' for _ in range(n)] for _ in range(n)]

    top, bottom, left, right = 0, n - 1, 0, n - 1
    direction = 0

    while top <= bottom and left <= right:
        if direction == 0:  # Вправо
            for i in range(left, right + 1):
                matrix[top][i] = message.pop(0)
            top += 1
        elif direction == 1:  # Вниз
            for i in range(top, bottom + 1):
                matrix[i][right] = message.pop(0)
            right -= 1
        elif direction == 2:  # Влево
            for i in range(right, left - 1, -1):
                matrix[bottom][i] = message.pop(0)
            bottom -= 1
        elif direction == 3:  # Вверх
            for i in range(bottom, top - 1, -1):
                matrix[i][left] = message.pop(0)
            left += 1

        direction = (direction + 1) % 4

    return matrix



def print_matrix(matrix):
    for row in matrix:
        print(' '.join(row))

text = open_file('./text.txt')
if text:
    matrix = spiral_matrix(list(text))
    print_matrix(matrix)

@timer_decorator
def decrypt_spiral_matrix(matrix):
    decrypted_message = ''
    n = len(matrix)

    top, bottom, left, right = 0, n - 1, 0, n - 1
    direction = 0

    while top <= bottom and left <= right:
        if direction == 0:  # Движение вправо
            for i in range(left, right + 1):
                decrypted_message += matrix[top][i]
            top += 1
        elif direction == 1:  # Движение вниз
            for i in range(top, bottom + 1):
                decrypted_message += matrix[i][right]
            right -= 1
        elif direction == 2:  # Движение влево
            for i in range(right, left - 1, -1):
                decrypted_message += matrix[bottom][i]
            bottom -= 1
        elif direction == 3:  # Движение вверх
            for i in range(bottom, top - 1, -1):
                decrypted_message += matrix[i][left]
            left += 1

        direction = (direction + 1) % 4  # Изменение направления движения

    return decrypted_message


decrypted_message = decrypt_spiral_matrix(matrix)
print(decrypted_message)

import matplotlib.pyplot as plt
import collections

def get_probabilities(text):
  symbol_counts = collections.Counter(text)
  total_symbols = len(text)
  probabilities = {symbol: count / total_symbols for symbol, count in symbol_counts.items()}
  return probabilities


def draw_hist(probabilities):
    plt.bar(probabilities.keys(), probabilities.values())
    plt.xlabel("Символ")
    plt.ylabel("Вероятность")
    plt.title("Вероятности символов")
    plt.show()

probabilities = get_probabilities(text)
draw_hist(probabilities)

import time

def timer_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"Время выполнения функции {func.__name__}: {end_time - start_time} секунд")
        return result
    return wrapper

import numpy as np

text = "пшенко артем федорович"

num_rows = 4
num_cols = 6

if len(text) < num_rows * num_cols:
    text += ' ' * (num_rows * num_cols - len(text))

text_list = list(text)

matrix_text = np.array(text_list).reshape(num_rows, num_cols)

print('Исходная матрица:\n', matrix_text, '\n')

row_indices = np.random.permutation(num_rows) + 1  # индексы строк
col_indices = np.random.permutation(num_cols) + 1  # индексы столбцов

print('Индексы строк: ', row_indices, '\n')
print('Индексы столбцов: ', col_indices, '\n')

matrix_text = matrix_text[:, np.argsort(col_indices)]
print('столбцы:\n', matrix_text, '\n')

matrix_text = matrix_text[np.argsort(row_indices), :]
print('строки:\n', matrix_text, '\n')

print('Матрица после перестановки строк и столбцов:\n', matrix_text)


final_string = ''.join(matrix_text.flatten(order='F'))
print('Зашифрованное сообщение: ', final_string, '\n')

matrix_final = np.array(list(final_string)).reshape(num_rows, num_cols, order='F')

print('Матрица из итоговой строки:\n', matrix_final, '\n')

matrix_final = matrix_final[np.argsort(row_indices + 1), :]  # Перестановка строк
matrix_final = matrix_final[:, np.argsort(np.argsort(col_indices + 1))]  # Перестановка столбцов

print('Матрица после возвращения к исходному состоянию:')
print(matrix_final)
decrypted_string = ''.join(matrix_final.flatten(order='C'))
print('Расшифрованное сообщение: ', decrypted_string, '\n')